searchState.loadedDescShard("sdd", 0, "Scalable Delayed Dealloc\n<code>AtomicOwned</code> owns the underlying instance, and allows users …\n<code>AtomicShared</code> owns the underlying instance, and allows …\nBoth bits are tagged.\n<code>Epoch</code> represents the period of time the global epoch value …\nThe first bit is tagged.\n<code>Guard</code> allows the user to read <code>AtomicShared</code> and keeps the …\nNone tagged.\n<code>Owned</code> uniquely owns an instance.\n<code>Ptr</code> points to an instance.\nThe second bit is tagged.\n<code>Shared</code> is a reference-counted handle to an instance.\n<code>Tag</code> is a four-state <code>Enum</code> that can be embedded in a pointer …\nForces the <code>Guard</code> to try to start a new epoch when it is …\nProvides a raw pointer to the instance.\nProvides a raw pointer to the instance.\nProvides a raw pointer to the instance.\nTries to create a reference to the underlying instance.\nClones <code>self</code> including tags.\nStores <code>new</code> into the <code>AtomicOwned</code> if the current value is …\nStores <code>new</code> into the <code>AtomicShared</code> if the current value is …\nStores <code>new</code> into the <code>AtomicOwned</code> if the current value is …\nStores <code>new</code> into the <code>AtomicShared</code> if the current value is …\nExecutes the supplied closure at a later point of time.\nDrops the instance immediately.\nDrops the instance immediately if it has held the last …\nReturns the epoch in which the current thread lives.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AtomicOwned</code> from an <code>Owned</code> of <code>T</code>.\nCreates a new <code>AtomicShared</code> from a <code>Shared</code> of <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Ptr</code> to the instance that may live as long as the …\nReturns a <code>Ptr</code> to the instance that may live as long as the …\nReturns a reference to the instance that may live as long …\nReturns a reference to the instance that may live as long …\nReturns a mutable reference to the instance.\nReturns a mutable reference to the instance if the <code>Shared</code> …\nTries to create a <code>Shared</code> out of <code>self</code>.\nTries to convert itself into a <code>Shared</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into an <code>Owned</code>.\nConverts <code>self</code> into a <code>Shared</code>.\nReturns <code>true</code> if the <code>AtomicOwned</code> is null.\nReturns <code>true</code> if the <code>AtomicShared</code> is null.\nReturns <code>true</code> if the <code>Ptr</code> is null.\nLoads a pointer value from the <code>AtomicOwned</code>.\nLoads a pointer value from the <code>AtomicShared</code>.\nCreates a new <code>Guard</code>.\nCreates a new <code>AtomicOwned</code> from an instance of <code>T</code>.\nCreates a new <code>AtomicShared</code> from an instance of <code>T</code>.\nCreates a new instance of <code>Owned</code>.\nCreates a new <code>Shared</code>.\nCreates a new <code>Owned</code> without checking the lifetime of <code>T</code>.\nCreates a new <code>Shared</code> without checking the lifetime of <code>T</code>.\nReturns the next <code>Epoch</code> value.\nReturns a future <code>Epoch</code> when the current readers will not …\nCreates a null <code>AtomicOwned</code>.\nCreates a null <code>AtomicShared</code>.\nCreates a null <code>Ptr</code>.\nReturns the previous <code>Epoch</code> value.\nReleases the strong reference by passing <code>self</code> to the given …\nSets a <code>Tag</code>, overwriting its existing <code>Tag</code>.\nSuspends the garbage collector of the current thread.\nStores the given value into the <code>AtomicOwned</code> and returns …\nStores the given value into the <code>AtomicShared</code> and returns …\nReturns its <code>Tag</code>.\nReturns its <code>Tag</code>.\nReturns its <code>Tag</code>.\nClears its <code>Tag</code>.\nSets a new <code>Tag</code> if the given condition is met.\nSets a new <code>Tag</code> if the given condition is met.\nReturns a copy of <code>self</code> with a <code>Tag</code> set.\nReturns a copy of <code>self</code> with its <code>Tag</code> erased.")
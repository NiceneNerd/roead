searchState.loadedDescShard("ryml", 0, "ryml: Rapid YAML Bindings for Rust\na document\nError type for this crate\nis member of a map, must have non-empty key\nthe key has an &amp;anchor\na *reference: the key references an &amp;anchor\nthe key has an explicit tag/type\na map: a parent of keyvals\nRepresents the pseudo-index of a node that does not exist.\nno type is set\nAn entry in the <code>Tree</code> representing all the data for a YAML …\nThrown when a node lookup turns up empty.\nA reference to a node in the tree.\nA view of scalar data for a node, containing the tag, …\nA bitmask for marking node types.\nA general exception thrown by rapidyaml over FFI.\na seq: a parent of vals\na stream: a seq of docs\nRepresents a parsed YAML tree\na leaf node, has a (possibly empty) value\nthe val has an &amp;anchor\na *reference: the val references an &amp;anchor\nthe val has an explicit tag/type\nmark key scalar as double quoted\nmark key scalar as multiline, block folded &gt;\nfeatures: mark key scalar as having double quotes in its …\nfeatures: mark key scalar as having \\n in its contents\nfeatures: mark key scalar as having single quotes in its …\nmark key scalar as multiline, block literal |\nmark key scalar as plain scalar (unquoted, even when …\nmark key scalar as single quoted\n?\nmark container with block format (seqs as ‘- val\\n’, …\nmark container with multi-line flow format (seqs as ’[…\nmark container with single-line flow format (seqs as ’[…\nmark val scalar as double quoted\nmark val scalar as multiline, block folded &gt;\nfeatures: mark val scalar as having double quotes in its …\nfeatures: mark val scalar as having \\n in its contents\nfeatures: mark val scalar as having single quotes in its …\nmark val scalar as multiline, block literal |\nmark val scalar as plain scalar (unquoted, even when …\nmark val scalar as single quoted\n?\nThe text of the anchor associated with this node.\nInsert a new node as the last child of the given parent, …\nInsert a new node as the last child of this node, …\nInsert a new node as the last sibling of the given node, …\nInsert a new node as the last sibling of this node, …\nGet the capacity of the internal string arena.\nReturns true is the internal string arena is empty.\nGet the size of the internal string arena.\nGet the unused capacity of the internal string arena.\nGet the capacity of the tree.\nChange the type of a node, resetting its contents if …\nChange the type of the node, resetting its contents if …\nIf the given node exists and has a child at the given …\nGet a <code>NodeRef</code> to the child of this node at the given …\nGet a mutable <code>NodeRef</code> to the child of this node at the …\nIf the given node exists and has the given child, returns …\nGet the position of the child node in this node’s …\nClear the tree and zero every node.\nEmpties the node and removes any children.\nClear the internal string arena.\nClear the node’s children, if it exists and has any.\nClears the node key, if it exists.\nClears the node value, if it exists.\nGet the node data, if it exists and is still valid.\nGet a mutable reference to the node data, if it exists and …\nGet the node data, assuming it still exists and is valid.\nGet a mutable reference to the node data, assuming it …\nRecursively duplicate the given node, returning the index …\nDuplicate the node under a new parent, returning a <code>NodeRef</code> …\nRecursively duplicate the children of the given node (but …\nDuplicate the node’s children under a new parent.\nRecursively duplicate the children of the given node (but …\nDuplicate the node’s children (but not the node) in a …\nDuplicate the contents of a given node to the given index.\nDuplicate the contents of a given node from another tree …\nRecursively duplicate the given node from a different …\nEmit tree as YAML to an owned string.\nEmit tree as JSON to an owned string.\nEmit tree as JSON to the given buffer. Returns the number …\nEmit tree as JSON to the given writer. Returns the number …\nEmit tree as YAML to the given buffer. Returns the number …\nEmit tree as YAML to the given writer. Returns the number …\nIf the given node exists and has a child at the given key, …\nGet a <code>NodeRef</code> to the child of this node with the given …\nGet a mutable <code>NodeRef</code> to the child of this node with the …\nIf the given node exists and has a sibling at the given …\nGet a <code>NodeRef</code> to the sibling of this node with the given …\nGet a mutable <code>NodeRef</code> to the sibling of this node with the …\nIf the given node exists and has children, returns the …\nGet the index to the first child node, if one exists.\nGet a <code>NodeRef</code> to the first child of this node, if it …\nThe index to the first child node.\nGet a mutable <code>NodeRef</code> to the first child of this node, if …\nIf the given node exists and has siblings, returns the …\nGet a <code>NodeRef</code> to the first sibling of this node, if it …\nGet a mutable <code>NodeRef</code> to the first sibling of this node, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>NodeRef</code> to the given node, if it exists.\nGet a <code>NodeRef</code> to a child of this node by its given key (if …\nGet a mutable <code>NodeRef</code> to the given node, if it exists.\nGet a mutable <code>NodeRef</code> to a child of this node by its given …\nIf the given node exists, returns true if it has an anchor.\nCheck if the node has a anchor\nIf the given node exists, returns true if it has a child.\nReturns true if the node is a map and has a child with the …\nReturns true if the node is a sequence and has a child at …\nIf the given node exists, returns true if it has children.\nReturns true if the node has children.\nIf the given node exists, returns true if it has a key.\nCheck if the node has a key\nIf the given node exists, returns true if it has an anchor …\nCheck if the node has a key anchor\nIf the given node exists, returns true if it has a tagged …\nCheck if the node has a key tag\nIf the given node exists, returns true if it has a parent.\nReturns true if the node has a parent.\nIf the given node exists, returns true if it has a sibling.\nReturns true if the node has a sibling with the given key.\nReturns true if the node has a sibling at the given …\nIf the given node exists, returns true if it has siblings.\nReturns true if the node has siblings.\nIf the given node exists, returns true if it has a value.\nCheck if the node has a value\nIf the given node exists, returns true if it has an anchor …\nCheck if the node has a value anchor\nIf the given node exists, returns true if it has a tagged …\nCheck if the node has a value tag\nInsert a new node as the child of the given parent at the …\nInsert a new node as a child of this node, returning a …\nInsert a new node as the sibling of the given node, …\nInsert a new node as a sibling of this node, returning a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the given node exists, returns true if it is a anchor.\nCheck if the node is a anchor\nIf the given node exists, returns true if it is a …\nCheck if the node is a anchor or ref\nIf the given node exists, returns true if it is a …\nCheck if the node is a container\nIf the given node exists, returns true if it is a doc.\nCheck if the node is a doc\nReturns true if the tree is empty.\nReturns true if the name and value are empty and the node …\nIf the given node exists, returns true if it is a …\nCheck if the node is a key quoted\nIf the given node exists, returns true if it is a key_ref.\nCheck if the node is a key ref\nIf the given node exists, returns true if it is a keyval.\nCheck if the node is a keyval\nIf the given node exists, returns true if it is a map.\nCheck if the node is a map\nIf the given node exists, returns true if it is empty.\nIf the given node exists, returns true if it is a quoted.\nCheck if the node is a quoted\nIf the given node exists, returns true if it is a ref.\nCheck if the node is a ref\nIf the given node exists, returns true if it is a root.\nReturns true if the node is the root of the tree.\nCheck if the node reference holds a seed for a …\nIf the given node exists, returns true if it is a seq.\nCheck if the node is a seq\nIf the given node exists, returns true if it is a stream.\nCheck if the node is a stream\nIf the given node exists, returns true if it is a value.\nCheck if the node is a value\nIf the given node exists, returns true if it is a …\nCheck if the node is a value quoted\nIf the given node exists, returns true if it is a val_ref.\nCheck if the node is a value ref\nCheck if the node reference points to a valid node.\nIterate over the children of this node, if it exists and …\nIterate mutably over the children of this node, if it …\nGet the text of the given node, if it exists and is a key.\nGet the node key, if it exists.\nThe node key.\nGet the text of the anchor on the key of the given node, …\nGet the anchor on the node key, if it exists.\nGet the text of the reference on the key of the given …\nGet the reference on the node key, if it exists.\nGet the whole scalar key of the given node, if it exists …\nGet the scalar data of the node key, if it exists.\nGet the text of the tag on the key of the given node, if …\nGet the tag on the node key, if it exists.\nIf the given node exists and has children, returns the …\nGet the index to the last_child node, if one exists.\nGet a <code>NodeRef</code> to the last child of this node, if it exists.\nThe index to the last child node.\nGet a mutable <code>NodeRef</code> to the last child of this node, if …\nIf the given node exists and has siblings, returns the …\nGet a <code>NodeRef</code> to the last sibling of this node, if it …\nGet a mutable <code>NodeRef</code> to the last sibling of this node, if …\nGet the total number of nodes.\nChange the node’s position within its parent.\nChange the node’s position in the parent.\nChange the node’s parent (in a different tree) and …\nChange the node’s parent and position.\nMove the node to a different parent, which may be in a new …\nIf the given node exists and has a next sibling, returns …\nGet the index to the next sibling node, if one exists.\nReturns a <code>NodeRef</code> to the next sibling, if it exists.\nThe index to the next sibling node.\nReturns a mutable <code>NodeRef</code> to the next sibling, if it …\nGet the type of the given node, if it exists.\nGet the node type, if it exists.\nThe node type flags.\nGet the type name of the given node, if it exists.\nGet the node type name, if it exists.\nIf the given node exists and has children, returns the …\nGet the number of children of the node.\nIf the given node exists and has other siblings, returns …\nIf the given node exists and has siblings, returns the …\nIf the given node exists and has a parent, returns the …\nGet the index to the parent node, if one exists.\nReturns a <code>NodeRef</code> to the parent node, if it exists.\nThe index to the parent node.\nIf the given node exists, returns true if the parent is a …\nCheck if the parent is a map\nIf the given node exists, returns true if the parent is a …\nCheck if the parent is a sequence\nReturns a mutable <code>NodeRef</code> to the parent node, if it exists.\nCreate a new tree and parse into its root. The immutable …\nCreate a new tree and parse into its root. A mutable …\nInsert a new node as the first child of the given parent, …\nInsert a new node as the first child of this node, …\nInsert a new node as the first sibling of the given node, …\nInsert a new node as the first sibling of this node, …\nIf the given node exists and has a previous sibling, …\nGet the index to the previous sibling node, if one exists.\nReturns a <code>NodeRef</code> to the previous sibling, if it exists.\nThe index to the previous sibling node.\nReturns a mutable <code>NodeRef</code> to the previous sibling, if it …\nRemove the reference on the anchor of the given node.\nRemove the anchor on the key of the given node.\nRemove the reference on the key of the given node.\nRemove the anchor on the value of the given node.\nRemove the reference on the value of the given node.\nRemove the given node from its parent, including any …\nRemove the given child from this node.\nRemove the child at the given index from this node.\nRemove the child with the given key from this node.\nRemove all children from a given node, leaving the node …\nReorder the tree in memory so that all the nodes are …\nReserves capacity to hold at least <code>capacity</code> nodes.\nEnsures the tree’s internal string arena is at least the …\nResolve references (aliases &lt;- anchors) in the tree.\nGet the node to the root node.\nGet a <code>NodeRef</code> to the root node.\nGet a mutable <code>NodeRef</code> to the root node.\nThe text of the node scalar value.\nSets the node’s key.\nSet the anchor on the key of the given node.\nSet the anchor on the node key.\nSet the ref on the key of the given node.\nSet the ref on the node key.\nSet the tag on the key of the given node.\nSet the tag on the node key.\nSet flags on the node.\nSets the node’s value.\nSet the anchor on the value of the given node.\nSet the anchor on the node val.\nSet the ref on the value of the given node.\nSet the ref on the node val.\nSet the tag on the value of the given node.\nSet the tag on the node val.\nIf the given node exists and has a sibling as the given …\nGet a <code>NodeRef</code> to the sibling of this node at the given …\nGet a mutable <code>NodeRef</code> to the sibling of this node at the …\nIf the given node exists and has the given sibling, get …\nGet the unused capacity of the tree.\nThe tag associated with this node.\nTurn the given node into a doc.\nTurn the given node into a doc with additional flags.\nTurn the given node into a key-value pair.\nTurn the given node into a key-value pair with additional …\nTurn the given node into a map.\nTurn the given node with the given key into a map.\nTurn the given node into a map with additional flags.\nTurn the given node with the given key into a map with …\nTurn the given node into a sequence.\nTurn the given node with the given key into a sequence.\nTurn the given node into a sequence with additional flags.\nTurn the given node with the given key into a sequence …\nTurn the given node into a stream.\nTurn the given node into a stream with additional flags.\nTurn the given node into a value.\nTurn the given node into a value with additional flags.\nGet the tree the node belongs to.\nGet a mutable reference to the tree the node belongs to.\nGet the text of the given node, if it exists and is a …\nGet the node value, if it exists.\nGet the text of the anchor on the value of the given node, …\nGet the anchor on the node value, if it exists.\nGet the text of the reference on the value of the given …\nGet the reference on the node value, if it exists.\nGet the whole scalar value of the given node, if it exists …\nGet the scalar data of the node value, if it exists.\nGet the text of the tag on the value of the given node, if …\nGet the tag on the node value, if it exists.\nThe node value.")
searchState.loadedDescShard("binrw", 0, "binrw helps you write maintainable &amp; easy-to-read …\nThe type used for the <code>args</code> parameter of <code>read_args()</code> and …\nThe type used for the <code>args</code> parameter of <code>write_args()</code> and …\nAn assertion failed.\nAn error with additional frames of context used to …\nAn expected magic number was not found.\nThe most significant byte is stored first.\nThe <code>BinRead</code> trait reads data from streams and converts it …\nDerive macro generating an impl of the trait <code>BinRead</code>.\nExtension methods for reading <code>BinRead</code> objects directly …\nA specialized <code>Result</code> type for binrw operations.\nThe <code>BinWrite</code> trait serialises objects and writes them to …\nDerive macro generating an impl of the trait <code>BinWrite</code>.\nExtension methods for writing <code>BinWrite</code> objects directly to …\nThe builder type for this type.\nA user-generated error.\nDefines the order of bytes in a multi-byte type.\nNone of the variants of an enum could successfully be …\nContains the error value\nThe error type used by <code>BinRead</code>.\nA wrapper type which represents a layer of indirection …\nA type alias for <code>FilePtr</code> with 128-bit offsets.\nA type alias for <code>FilePtr</code> with 16-bit offsets.\nA type alias for <code>FilePtr</code> with 32-bit offsets.\nA type alias for <code>FilePtr</code> with 64-bit offsets.\nA type alias for <code>FilePtr</code> with 8-bit offsets.\nAn error occurred in the underlying reader while reading …\nThe least significant byte is stored first.\nThe <code>NamedArgs</code> trait allows named arguments objects to be …\nDerive macro generating an impl of the trait <code>NamedArgs</code>.\nNone of the variants of an enum could successfully be …\nA null-terminated 8-bit string.\nA null-terminated 16-bit string.\nContains the success value\nA wrapper that stores a value’s position alongside the …\nNamed arguments for the <code>BinRead::read_options()</code> …\nA convenience macro for constructing named arguments.\nAttribute macro used to generate an impl of the trait …\nAttribute macro used to generate an impl of both <code>BinRead</code> …\nAttribute macro used to generate an impl of the trait …\nCreates a new builder for this type.\nCreates a new builder for this type.\nThe number of elements to read.\nDereferences the value stored by <code>FilePtr</code>.\nMutably dereferences the value stored by <code>FilePtr</code>.\nAdditional long-form documentation and reference material.\nType definitions for byte order handling.\nFunctions and type definitions for handling errors.\nType definitions and helpers for handling indirection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHelper functions for reading and writing data.\nThe arguments for the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTraits, helpers, and type definitions for core I/O …\nTraits that expose information about the way types are …\nAttribute macro used to generate <code>parse_with</code> functions.\nThe byte position of the start of the value.\nThe binrw prelude.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nType definitions for wrappers which parse interleaved data.\nRead <code>Self</code> from the reader using default arguments.\nRead <code>Self</code> from the reader using default arguments.\nRead <code>Self</code> from the reader using the given arguments.\nRead <code>Self</code> from the reader using the given arguments.\nRead <code>Self</code> from the reader using default arguments and …\nRead <code>Self</code> from the reader using default arguments and …\nRead <code>T</code> from the reader assuming big-endian byte order.\nRead <code>T</code> from the reader assuming big-endian byte order.\nRead <code>Self</code> from the reader, assuming big-endian byte order, …\nRead <code>Self</code> from the reader, assuming big-endian byte order, …\nRead <code>T</code> from the reader, assuming big-endian byte order, …\nRead <code>T</code> from the reader, assuming big-endian byte order, …\nRead <code>Self</code> from the reader using default arguments and …\nRead <code>Self</code> from the reader using default arguments and …\nRead <code>T</code> from the reader assuming little-endian byte order.\nRead <code>T</code> from the reader assuming little-endian byte order.\nRead <code>Self</code> from the reader, assuming little-endian byte …\nRead <code>Self</code> from the reader, assuming little-endian byte …\nRead <code>T</code> from the reader, assuming little-endian byte order, …\nRead <code>T</code> from the reader, assuming little-endian byte order, …\nRead <code>T</code> from the reader assuming native-endian byte order.\nRead <code>T</code> from the reader assuming native-endian byte order.\nRead <code>T</code> from the reader assuming native-endian byte order.\nRead <code>T</code> from the reader assuming native-endian byte order.\nRead <code>T</code> from the reader, assuming native-endian byte order, …\nRead <code>T</code> from the reader, assuming native-endian byte order, …\nRead <code>T</code> from the reader, assuming native-endian byte order, …\nRead <code>T</code> from the reader, assuming native-endian byte order, …\nRead <code>Self</code> from the reader using the given <code>Endian</code> and …\nRead <code>T</code> from the reader with the given byte order.\nRead <code>T</code> from the reader with the given byte order.\nRead <code>T</code> from the reader with the given byte order and …\nRead <code>T</code> from the reader with the given byte order and …\nThe read value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nWrite <code>Self</code> to the writer using default arguments.\nWrite <code>Self</code> to the writer using default arguments.\nWrite <code>Self</code> to the writer using the given arguments.\nWrite <code>Self</code> to the writer using the given arguments.\nWrite <code>Self</code> to the writer assuming big-endian byte order.\nWrite <code>Self</code> to the writer assuming big-endian byte order.\nWrite <code>T</code> to the writer assuming big-endian byte order.\nWrite <code>T</code> to the writer assuming big-endian byte order.\nWrite <code>Self</code> to the writer, assuming big-endian byte order, …\nWrite <code>Self</code> to the writer, assuming big-endian byte order, …\nWrite <code>T</code> to the writer, assuming big-endian byte order, …\nWrite <code>T</code> to the writer, assuming big-endian byte order, …\nWrite <code>Self</code> to the writer assuming little-endian byte order.\nWrite <code>Self</code> to the writer assuming little-endian byte order.\nWrite <code>T</code> to the writer assuming little-endian byte order.\nWrite <code>T</code> to the writer assuming little-endian byte order.\nWrite <code>Self</code> to the writer, assuming little-endian byte …\nWrite <code>Self</code> to the writer, assuming little-endian byte …\nWrite <code>T</code> to the writer, assuming little-endian byte order, …\nWrite <code>T</code> to the writer, assuming little-endian byte order, …\nWrite <code>T</code> to the writer assuming native-endian byte order.\nWrite <code>T</code> to the writer assuming native-endian byte order.\nWrite <code>T</code> to the writer, assuming native-endian byte order, …\nWrite <code>T</code> to the writer, assuming native-endian byte order, …\nWrite <code>Self</code> to the writer using the given <code>Endian</code> and …\nWrite <code>T</code> to the writer with the given byte order.\nWrite <code>T</code> to the writer with the given byte order.\nWrite <code>T</code> to the writer with the given byte order and …\nWrite <code>T</code> to the writer with the given byte order and …\nAttribute macro used to generate <code>write_with</code> functions.\nThe original error.\nThe value which was actually read.\nThe failure message.\nThe byte position of the unexpected magic in the reader.\nThe byte position of the start of the field or object that …\nThe byte position of the start of the field or object that …\nThe byte position of the unparsable data in the reader.\nThe byte position of the unparsable data in the reader.\nThe original errors which occurred when trying to parse …\nGlossary of directives in binrw attributes (<code>#[br]</code>, <code>#[bw]</code>, …\nTips for high performance parsing and serialisation.\nThe most significant byte is stored first.\nDefines the order of bytes in a multi-byte type.\nThe least significant byte is stored first.\nThe target platform’s native endianness.\nConverts a byte array containing a UTF-16 byte order mark …\nConverts an <code>Endian</code> value into an array containing a UTF-16 …\nAn assertion failed.\nAn error backtrace.\nAn error with additional frames of context used to …\nA captured backtrace frame.\nAn expected magic number was not found.\nThe <code>ContextExt</code> trait allows extra information to be added …\nA user-generated error.\nA user-specified custom error context.\nThe <code>CustomError</code> trait describes types that are usable as …\nNone of the variants of an enum could successfully be …\nThe error type used by <code>BinRead</code>.\nA standard frame.\nAn error occurred in the underlying reader while reading …\nA message-only frame.\nNone of the variants of an enum could successfully be …\nReturns a reference to the boxed error object if this <code>Error</code>…\nAttempts to downcast a boxed error to a concrete type.\nReturns some mutable reference to the boxed value if it is …\nReturns some reference to the boxed value if it is of type …\nThe source error which caused this backtrace.\nThe frames which lead to the given error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the boxed type is the same as <code>T</code>.\nCheck if the root cause of this error is an <code>Error::Io</code> and …\nCreates a new backtrace from a source error and a set of …\nReturns the source error. For a Backtrace this is the …\nAdds a new context frame to the error, consuming the …\nAdds a new frame of context to the error with the given …\nThe code at the location where the frame was generated.\nThe origin filename.\nThe origin line number.\nThe context message. This may be overridden by the error …\nThe original error.\nThe value which was actually read.\nThe failure message.\nThe byte position of the unexpected magic in the reader.\nThe byte position of the start of the field or object that …\nThe byte position of the start of the field or object that …\nThe byte position of the unparsable data in the reader.\nThe byte position of the unparsable data in the reader.\nThe original errors which occurred when trying to parse …\nA wrapper type which represents a layer of indirection …\nA type alias for <code>FilePtr</code> with 128-bit offsets.\nA type alias for <code>FilePtr</code> with 16-bit offsets.\nA type alias for <code>FilePtr</code> with 32-bit offsets.\nA type alias for <code>FilePtr</code> with 64-bit offsets.\nA type alias for <code>FilePtr</code> with 8-bit offsets.\nNamed arguments for the <code>BinRead::read_options()</code> …\nA builder for <code>FilePtrArgs</code> objects. Compatible with …\nA trait to convert from an integer into <code>SeekFrom::Current</code>.\nA type alias for <code>FilePtr</code> with non-zero 128-bit offsets.\nA type alias for <code>FilePtr</code> with non-zero 16-bit offsets.\nA type alias for <code>FilePtr</code> with non-zero 32-bit offsets.\nA type alias for <code>FilePtr</code> with non-zero 64-bit offsets.\nA type alias for <code>FilePtr</code> with non-zero 8-bit offsets.\nCreates a new builder for this type.\nBuilds the object.\nBuilds the object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets <code>inner</code> to the given value.\nThe arguments for the inner type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the pointed-to value.\nConverts the value.\nSets <code>offset</code> to the given value.\nAn absolute offset added to the <code>FilePtr::ptr</code> offset before …\nReads an offset, then seeks to and parses the pointed-to …\nCreates a parser that reads a collection of values from an …\nCreates a parser that reads a collection of values from an …\nCreates a parser that reads an offset, then seeks to and …\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe raw offset to the value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nThe pointed-to value.\nCreates a parser that reads an offset, then seeks to and …\nCreates a parser that builds a collection using items from …\nCreates a parser that uses a given function to build a …\nCreates a parser that reads N items into a collection.\nCreates a parser that uses a given function to read N …\nReads a 24-bit unsigned integer.\nCreates a parser that reads items into a collection until …\nCreates a parser that reads items into a collection until …\nCreates a parser that uses a given function to read items …\nCreates a parser that reads items into a collection until …\nCreates a parser that uses a given function to read items …\nCreates a parser that uses a given function to read items …\nWrites a 24-bit unsigned integer.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nThe operation failed because a pipe was closed.\nA wrapper to add buffering to a read stream.\nAn iterator over <code>u8</code> values of a reader.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nA <code>Cursor</code> wraps an in-memory buffer and provides it with a …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA wrapper that provides a limited implementation of <code>Seek</code> …\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nThe <code>Read</code> trait allows for reading bytes from a source.\nThe filesystem or storage medium is read-only, but a write …\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nThe <code>Seek</code> trait provides a cursor which can be moved within …\nEnumeration of possible methods to seek within an I/O …\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nRead adapter which limits the bytes read from an …\nAn extension trait that implements <code>take_seek()</code> for …\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nA trait for objects which are byte-oriented sinks.\nAn error returned when an operation could not be completed …\nReturns a reference to the internally buffered data.\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adapter for this instance of …\nTransforms this <code>Read</code> instance to an <code>Iterator</code> over its …\nReturns the number of bytes the internal buffer can hold …\nCreates an adapter which will chain this stream with …\nAttempts to downcast the custom boxed error to <code>E</code>.\nFlushes this output stream, ensuring that all …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nReturns the argument unchanged.\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying value.\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying reader.\nGets a reference to the underlying value.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the underlying reader.\nGets a reference to the underlying value in this cursor.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>BufReader&lt;T&gt;</code>, returning the underlying reader.\nConsumes this wrapper, returning the underlying value.\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes this wrapper, returning the wrapped value.\nConsumes this cursor, returning the underlying value.\nDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> …\nDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the number of bytes that can be read before this …\nCreates a new <code>BufReader&lt;T&gt;</code> with a default buffer capacity.\nCreates a new seekable wrapper for the given value.\nCreates a new I/O error from a known kind of error as well …\nCreates a new cursor wrapping the provided underlying …\nCreates a new I/O error from an arbitrary error payload.\nReturns the current position of this cursor.\nThe I/O Prelude\nReturns the OS error that this error represents (if any).\nPull some bytes from this source into the specified …\nPull some bytes from this source into the specified buffer.\nReads the exact number of bytes required to fill <code>cursor</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nLike <code>read</code>, except that it reads into a slice of buffers.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nPerforms a seek that forces invalidation of the buffer and …\nSeeks relative to the current position.\nSets the number of bytes that can be read before this …\nSets the position of this cursor.\nSplits the underlying slice at the cursor position and …\nSplits the underlying slice at the cursor position and …\nReturns the length of this stream (in bytes).\nReturns the current seek position from the start of the …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates a new <code>BufReader&lt;T&gt;</code> with the specified buffer …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write multiple buffers into this writer.\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.\nThe <code>Read</code> trait allows for reading bytes from a source.\nThe <code>Seek</code> trait provides a cursor which can be moved within …\nA trait for objects which are byte-oriented sinks.\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adapter for this instance of …\nTransforms this <code>Read</code> instance to an <code>Iterator</code> over its …\nCreates an adapter which will chain this stream with …\nFlushes this output stream, ensuring that all …\nDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> …\nDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> …\nPull some bytes from this source into the specified …\nPull some bytes from this source into the specified buffer.\nReads the exact number of bytes required to fill <code>cursor</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nLike <code>read</code>, except that it reads into a slice of buffers.\nRewind to the beginning of a stream.\nSeek to an offset, in bytes, in a stream.\nSeeks relative to the current position.\nReturns the length of this stream (in bytes).\nReturns the current seek position from the start of the …\nCreates an adapter which will read at most <code>limit</code> bytes …\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write multiple buffers into this writer.\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.\nThe endianness of the type.\nThe endianness of the type.\nThe type uses a fixed endianness.\nThe kind of endianness used by a type.\nThe magic number.\nThe magic number.\nThe type of the magic number.\nThe type of the magic number.\nThe type uses a heterogenous mix of endianness.\nThe type has no endianness at all.\nTypes with explicit read endianness.\nTypes that require a magic number when parsed.\nThe type uses an endianness that is dynamically determined …\nTypes with explicit write endianness.\nTypes that write a magic number when serialised.\nReturns the fixed endianness of the type, if one exists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDerive macro generating an impl of the trait <code>BinRead</code>.\nDerive macro generating an impl of the trait <code>BinRead</code>.\nDerive macro generating an impl of the trait <code>BinWrite</code>.\nDerive macro generating an impl of the trait <code>BinWrite</code>.\nAttribute macro used to generate an impl of the trait …\nAttribute macro used to generate an impl of both <code>BinRead</code> …\nAttribute macro used to generate an impl of both <code>BinRead</code> …\nAttribute macro used to generate an impl of the trait …\nA parser for data which consists of values of type <code>T</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the data values while …\nParses values of type <code>T</code> separated by values of type <code>P</code> …\nParses values of type <code>T</code> interleaved with values of type <code>P</code>, …\nThe separator values.")